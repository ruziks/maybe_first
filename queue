#include<iostream>
#include<fstream>
using namespace std;

class QueueException
{
private:
 string str;
public:
 QueueException(string message) : str(message) {}
 string what()
 {
  return str;
 }
};

template <class Item> //класс-шаблон очередь
class Queue {
 struct Element {
  Item inf;
  Element* next;
  Element(Item x) : inf(x), next(0) {}
 };
 Element* head, * tail; // указатели на начало и конец очереди
public:
 Queue() :head(0), tail(0) {}

 bool Empty()
 { // возвращает тру, если очередь пуста, иначе фолс
  return head == 0;
 }

 Item Get() {
  if (Empty()) // если очередь пуста, то генерируем исключение
  {
   throw QueueException("empty");
  }
  else // иначе извлекаем элемент из головы очереди
  {
   Element* t = head;
   Item i = t->inf;
   head = t->next;
   if (head == NULL) 
    tail = NULL;
   delete t;
   return i;
  }
 }

 void Put(Item data)
 {
  // устанавливаем вспомогательный указатель на последний элемент очереди
  Element* t = tail; 
  // формируем новый элемент, на который будет указывать тэийл 
  tail = new Element(data); 
  // если до этого очередь была пуста, то элемент является и первым, и последним
  // поэтому указатель хэд устанавливаем на этот элемент
  if (!head)
   head = tail;
  else
   t->next = tail;
 }
};

int main()
{
 ifstream in("input.txt");
 ofstream out("output.txt");
 Queue<int> t;
 int i;
 while (in >> i)
 {
  if(i%2==0)
   t.Put(i);
  t.Put(i);
 }
 in.close();

 // пока очередь не пуста, извлекаем из нее элементы
 while (!t.Empty())
 {
  out << t.Get() << " ";
 }
 out.close();
 return 0;
}
int main() {
    Queue<int> q;
    int x, y, n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        int num;
        cin >> num;
        q.Put(num);
        if (num == x) {
        q.Put(y);
        }
    }
    while (!q.Empty()) {
        cout << q.Get << " ";
    }   
    cout << endl;
    return 0;
}
